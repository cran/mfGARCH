// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// calculate_g
NumericVector calculate_g(double omega, double alpha, double beta, double gamma, NumericVector returns, double g0);
RcppExport SEXP _mfGARCH_calculate_g(SEXP omegaSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP returnsSEXP, SEXP g0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type returns(returnsSEXP);
    Rcpp::traits::input_parameter< double >::type g0(g0SEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_g(omega, alpha, beta, gamma, returns, g0));
    return rcpp_result_gen;
END_RCPP
}
// calculate_h_andersen
NumericVector calculate_h_andersen(double ndays, double delta, double mu, double theta, double omega, double lambda, NumericVector Z, double pi, double h0);
RcppExport SEXP _mfGARCH_calculate_h_andersen(SEXP ndaysSEXP, SEXP deltaSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP omegaSEXP, SEXP lambdaSEXP, SEXP ZSEXP, SEXP piSEXP, SEXP h0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type ndays(ndaysSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< double >::type pi(piSEXP);
    Rcpp::traits::input_parameter< double >::type h0(h0SEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_h_andersen(ndays, delta, mu, theta, omega, lambda, Z, pi, h0));
    return rcpp_result_gen;
END_RCPP
}
// calculate_p
NumericVector calculate_p(double ndays, double delta, double mu, NumericVector Zp, NumericVector h, double p0);
RcppExport SEXP _mfGARCH_calculate_p(SEXP ndaysSEXP, SEXP deltaSEXP, SEXP muSEXP, SEXP ZpSEXP, SEXP hSEXP, SEXP p0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type ndays(ndaysSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Zp(ZpSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type h(hSEXP);
    Rcpp::traits::input_parameter< double >::type p0(p0SEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_p(ndays, delta, mu, Zp, h, p0));
    return rcpp_result_gen;
END_RCPP
}
// simulate_r
List simulate_r(double n_days, double n_intraday, double alpha, double beta, double gamma, NumericVector Z, double h0);
RcppExport SEXP _mfGARCH_simulate_r(SEXP n_daysSEXP, SEXP n_intradaySEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP ZSEXP, SEXP h0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type n_days(n_daysSEXP);
    Rcpp::traits::input_parameter< double >::type n_intraday(n_intradaySEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< double >::type h0(h0SEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_r(n_days, n_intraday, alpha, beta, gamma, Z, h0));
    return rcpp_result_gen;
END_RCPP
}
// simulate_r_rv_as_dependent
List simulate_r_rv_as_dependent(double n_days, double n_intraday, double alpha, double beta, double gamma, NumericVector Z, double h0, int K, double m, double theta, NumericVector weights, int lowfreq, bool rvol);
RcppExport SEXP _mfGARCH_simulate_r_rv_as_dependent(SEXP n_daysSEXP, SEXP n_intradaySEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP ZSEXP, SEXP h0SEXP, SEXP KSEXP, SEXP mSEXP, SEXP thetaSEXP, SEXP weightsSEXP, SEXP lowfreqSEXP, SEXP rvolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type n_days(n_daysSEXP);
    Rcpp::traits::input_parameter< double >::type n_intraday(n_intradaySEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< double >::type h0(h0SEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type lowfreq(lowfreqSEXP);
    Rcpp::traits::input_parameter< bool >::type rvol(rvolSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_r_rv_as_dependent(n_days, n_intraday, alpha, beta, gamma, Z, h0, K, m, theta, weights, lowfreq, rvol));
    return rcpp_result_gen;
END_RCPP
}
// sum_tau_fcts
double sum_tau_fcts(int i, double m, double theta, NumericVector phivar, NumericVector covariate, int K);
RcppExport SEXP _mfGARCH_sum_tau_fcts(SEXP iSEXP, SEXP mSEXP, SEXP thetaSEXP, SEXP phivarSEXP, SEXP covariateSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phivar(phivarSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type covariate(covariateSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_tau_fcts(i, m, theta, phivar, covariate, K));
    return rcpp_result_gen;
END_RCPP
}
// sum_tau
NumericVector sum_tau(double m, double theta, NumericVector phivar, NumericVector covariate, int K);
RcppExport SEXP _mfGARCH_sum_tau(SEXP mSEXP, SEXP thetaSEXP, SEXP phivarSEXP, SEXP covariateSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phivar(phivarSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type covariate(covariateSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_tau(m, theta, phivar, covariate, K));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mfGARCH_calculate_g", (DL_FUNC) &_mfGARCH_calculate_g, 6},
    {"_mfGARCH_calculate_h_andersen", (DL_FUNC) &_mfGARCH_calculate_h_andersen, 9},
    {"_mfGARCH_calculate_p", (DL_FUNC) &_mfGARCH_calculate_p, 6},
    {"_mfGARCH_simulate_r", (DL_FUNC) &_mfGARCH_simulate_r, 7},
    {"_mfGARCH_simulate_r_rv_as_dependent", (DL_FUNC) &_mfGARCH_simulate_r_rv_as_dependent, 13},
    {"_mfGARCH_sum_tau_fcts", (DL_FUNC) &_mfGARCH_sum_tau_fcts, 6},
    {"_mfGARCH_sum_tau", (DL_FUNC) &_mfGARCH_sum_tau, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_mfGARCH(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
